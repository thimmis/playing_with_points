#/usr/bin/python3
#@ Author: Thomas Turner <thomas>
# @Date:   2020-09-23T11:12:09+02:00
# @Email:  thomas.benjamin.turner@gmail.com
# @Last modified by:   thomas
# @Last modified time: 2020-09-25T12:36:40+02:00

import sys
import numpy as np
import textwrap as tw


class ValidateInput:
    '''
    Verifies that the user input for the matrix, starting position an list of
    actions are of the correct length and or the correct type of information.

    Attributes:
    -----------
    None


    Methods:
    --------
    check_dimension_position(self,obj):
        assumption: must be a list of length 4. can be adjusted for higher
        dimensional tables.

    check_operation_list(self):
        Uses the modular arguemnt of Int() to ensure values are only 0-4.

    contains_zero(self,func):
        Looks to see if the list of actions contains any zeros to stop moving
        the pointer. Will auto append one if none is found.


    split_input(self,obj):
        splits the dimension and position input into two lists.


    '''

    def check_dimension_position(self,obj):
        '''
        Checks the user input for the matrix dimension and pointer position for
        amount of information and type of information given. Will continue asking
        for information until it is correct.

        Parameters:
        -----------
        obj : list
            The user command line input

        Returns:
        --------
        obj : list
            the validated entries converted to integers


        '''
        obj = obj.split(',')
        while len(obj) !=4:
            print("Excuse me, {} values given but 4 were expected try again...\n".format(len(obj)))
            while True:
                obj = sys.stdin.readline().rstrip().split(',')
                try:
                    for i in range(len(obj)):
                        obj[i] = int(obj[i])
                except ValueError:
                    print("You've entered invalid characters, try again with numbers.")
                    continue

                else:
                    break
        print(tw.fill('Thank you for putting in the correct amount and type of information.',width=55))
        obj = list(map(int,obj))
        return obj

    def check_operation_list(self):
        '''
        Checks if the user input is of the correct values and will prompt the
        user for input until it only has values from 0 to 4.

        Parameters:
        -----------
        None

        Returns:
        --------
        obj : list
            the list of operations to be sent to the data model.


        '''
        while True:
            obj = sys.stdin.readline().rstrip().split(',')
            try:
                for i in range(len(obj)):
                    obj[i] = int(obj[i],5)

            except ValueError:
                print('One or more of your numbers incorrect, try again...')
                continue
            else:
                break
        print("List of operations {} accepted".format(obj))
        return obj

    def contains_zero(self,func):
        '''
        Checks the action list for a zero which will end the algorithm. If a
        zero is not found it auto appends one to the list.

        Parameters:
        -----------
        func : list
            The list of actions generated by the user.

        Returns:
        --------
            func : list
                The list of actions generated by the user with or without a zero
                appended to it.
        '''
        if 0 not in func:
            func.append(0)
        return func


    def split_input(self,obj):
        '''
        Puts the matrix dimensions and the pointer start position into their own
        lists.

        Parameters:
        -----------
        obj : list
            User input for the matrix dimensions and pointer starting position.

        Returns:
        --------
        dim , pos :  list, list
            the lists containing the dimensions and starting position,
            respectively.


        '''
        dim = obj[:int(len(obj)/2)]
        pos = obj[int(len(obj)/2):]
        return dim , pos
